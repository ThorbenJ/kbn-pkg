
# sed -E 's/"node": "([^"]+)"/"node": ">=\1"/' <package.json.orig >package.json
#
#
# node `which yarn` run kbn bootstrap
#
#
#
# NJSV=$(node -v)
#
# [nix-shell:~/Git/ThorbenJ/kibana-packages-built/kibana]$ echo ${NJSV#v}
# 16.18.1
#
# [nix-shell:~/Git/ThorbenJ/kibana-packages-built/kibana]$ sed -E 's/"node": "([^"]+)"/"node": "'${NJSV#v}'"/' <package.json.orig >package.json
#
#
#
# sed -E 's/link:/file:/' <package.json.orig >package.json
#
# npm install --force
#
# npm install intl-format-cache
#
# export PATH=$PWD/node_modules/.bin:$PATH
#
# ln -s ../node_modules/\@bazel/bazelisk/bazelisk-darwin_arm64 bazel

# NJSV=$(node -v)
# echo "${NJSV#v}" > .node-version

# test -f WORKSPACE.bazel.orig || cp package.json WORKSPACE.bazel.orig
# sed -Ee 's/node_version = "[^"]+"/node_version = "'${NJSV#v}'"/' <WORKSPACE.bazel.orig >WORKSPACE.bazel
# sed -Ee '/^node_repositories[(]/, /^[)]/ s|^|#|' <WORKSPACE.bazel.orig >WORKSPACE.bazel
# sed -Ee 's/node_version = "[^"]+"/node_version = "'${NJSV#v}'"/' -e '/node_repositories = [{]/, /[}],/ s|^|#|' <WORKSPACE.bazel.orig >WORKSPACE.bazel

# sed -Ee 's/"node": "([^"]+)"/"node": "'${NJSV#v}'"/ p' -e 's/link:/file:/' <package.json.orig >package.json

npm install --force intl-format-cache @bazel/bazelisk yarn
# npm install --force


  "dependencies": {
    "@kbn/i18n": "file:./kibana/packages/kbn-es-query/target/types/packages/kbn-i18n",
    "@kbn/peggy": "file:./kibana/packages/kbn-es-query/target/types/packages/kbn-peggy",
    "@kbn/es-query": "file:./kibana/packages/kbn-es-query/target/types/packages/kbn-es-query"
  },



peggy -o target/types/packages/kbn-es-query/src/kuery/grammar/index.js packages/kbn-es-query/src/kuery/grammar/grammar.peggy


--no-package-lock --no-save --prefix .

# test -f package.json.orig || cp package.json package.json.orig
# sed -E -e 's/link:/file:/' <package.json.orig >package.json

# yarn add intl-format-cache


> me = require(".")
{ es_query: [Function (anonymous)], i18n: [Function (anonymous)] }
> q = me.es_query().buildEsQuery(null, {language:"kuery", query:"host.name:* AND bob:hmm"})
{ bool: { must: [], filter: [ [Object] ], should: [], must_not: [] } }
> JSON.stringify(q)
'{"bool":{"must":[],"filter":[{"bool":{"filter":[{"bool":{"should":[{"exists":{"field":"host.name"}}],"minimum_should_match":1}},{"bool":{"should":[{"match":{"bob":"hmm"}}],"minimum_should_match":1}}]}}],"should":[],"must_not":[]}}'


// function _func_name() {
//     return _func_name.caller.name
// }
